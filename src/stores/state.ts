import { ref, watch } from 'vue'
import { defineStore } from 'pinia'
import { pushSubscriptionApi } from '@/utils/api'

export const useStateStore = defineStore('state', () => {
    const theme = localStorage.getItem('theme')
    const darkMode = ref(theme === 'dark')
    // const isLoading = ref(false)
    // const isOffline = ref(false)
    // const isMenuOpen = ref(false)
    const windowWidth = ref(window.innerWidth)
    const isPWAMode = ref(false)

    // Push notifications state
    const notificationPermission = ref<NotificationPermission>('default')
    const pushSubscription = ref<PushSubscription | null>(null)
    const isSubscribedToPush = ref(false)
    const pushSubscriptionId = ref<number | null>(null)
    // const doubleCount = computed(() => count.value * 2)

    const handleResize = () => {
        windowWidth.value = window.innerWidth
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ PWA
    const checkPWAMode = () => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º display-mode —á–µ—Ä–µ–∑ CSS media query
        const isStandalone = window.matchMedia('(display-mode: standalone)').matches
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è iOS Safari
        const isIOSStandalone =
            'standalone' in window.navigator &&
            (window.navigator as Navigator & { standalone?: boolean }).standalone === true
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º User Agent –¥–ª—è Android
        const isAndroidApp = window.matchMedia('(display-mode: minimal-ui)').matches

        isPWAMode.value = isStandalone || isIOSStandalone || isAndroidApp
        return isPWAMode.value
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É PWA —Ä–µ–∂–∏–º–∞
    checkPWAMode()

    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è display-mode
    const standaloneMediaQuery = window.matchMedia('(display-mode: standalone)')
    const minimalUIMediaQuery = window.matchMedia('(display-mode: minimal-ui)')

    standaloneMediaQuery.addEventListener('change', checkPWAMode)
    minimalUIMediaQuery.addEventListener('change', checkPWAMode)

    window.addEventListener('resize', handleResize)

    // Push notifications initialization
    const initNotifications = () => {
        if ('Notification' in window) {
            notificationPermission.value = Notification.permission
        }
    }

    // –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const requestNotificationPermission = async (): Promise<NotificationPermission> => {
        if (!('Notification' in window)) {
            console.warn('This browser does not support notifications')
            return 'denied'
        }

        const permission = await Notification.requestPermission()
        notificationPermission.value = permission
        return permission
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    const ensureNotificationPermission = async (): Promise<boolean> => {
        if (notificationPermission.value !== 'granted') {
            const permission = await requestNotificationPermission()
            return permission === 'granted'
        }
        return true
    }

    // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const subscribeToPush = async (): Promise<PushSubscription | null> => {
        if (!('serviceWorker' in navigator) || !('PushManager' in window)) {
            console.warn('Push messaging is not supported')
            return null
        }

        try {
            const registration = await navigator.serviceWorker.ready

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–æ–¥–ø–∏—Å–∫—É
            const existingSubscription = await registration.pushManager.getSubscription()
            if (existingSubscription) {
                pushSubscription.value = existingSubscription
                isSubscribedToPush.value = true
                return existingSubscription
            }

            // –ü–æ–ª—É—á–∞–µ–º VAPID –∫–ª—é—á
            const vapidKey = await getVapidPublicKey()
            if (!isValidVapidKey(vapidKey)) {
                console.error('‚ùå VAPID –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–µ–Ω')
                console.info('üí° –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ VAPID –∫–ª—é—á–∞:')
                console.info('1. –°–æ–∑–¥–∞–π—Ç–µ VAPID –∫–ª—é—á–∏: npx web-push generate-vapid-keys')
                console.info(
                    '2. –î–æ–±–∞–≤—å—Ç–µ –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è VITE_VAPID_PUBLIC_KEY',
                )
                console.info(
                    '3. –ò–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç /api/push-subscriptions/vapid-public-key –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ',
                )
                throw new Error('VAPID –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω')
            }

            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É
            const subscription = await registration.pushManager.subscribe({
                userVisibleOnly: true,
                applicationServerKey: urlBase64ToUint8Array(vapidKey!).buffer as ArrayBuffer,
            })

            pushSubscription.value = subscription
            isSubscribedToPush.value = true

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            await sendSubscriptionToServer(subscription)

            return subscription
        } catch (error) {
            console.error('Failed to subscribe to push notifications:', error)
            if (error instanceof Error && error.message.includes('VAPID')) {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ VAPID
                console.warn('‚ö†Ô∏è Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã (VAPID –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)')
            }
            return null
        }
    }

    // –û—Ç–ø–∏—Å–∫–∞ –æ—Ç push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    const unsubscribeFromPush = async (): Promise<boolean> => {
        if (!pushSubscription.value) {
            return true
        }

        try {
            const success = await pushSubscription.value.unsubscribe()
            if (success) {
                // –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–µ—Ä–≤–µ—Ä –æ–± –æ—Ç–ø–∏—Å–∫–µ
                await removeSubscriptionFromServer(pushSubscription.value)

                pushSubscription.value = null
                isSubscribedToPush.value = false
            }
            return success
        } catch (error) {
            console.error('Failed to unsubscribe from push notifications:', error)
            return false
        }
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ VAPID –∫–ª—é—á–∞
    const urlBase64ToUint8Array = (base64String: string): Uint8Array => {
        const padding = '='.repeat((4 - (base64String.length % 4)) % 4)
        const base64 = (base64String + padding).replace(/-/g, '+').replace(/_/g, '/')

        const rawData = window.atob(base64)
        const outputArray = new Uint8Array(rawData.length)

        for (let i = 0; i < rawData.length; ++i) {
            outputArray[i] = rawData.charCodeAt(i)
        }
        return outputArray
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ VAPID –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞
    const getVapidPublicKey = async (): Promise<string | null> => {
        try {
            // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∫–ª—é—á —Å —Å–µ—Ä–≤–µ—Ä–∞
            const response = await pushSubscriptionApi.getVapidPublicKey()
            if (response.data && response.data.vapidPublicKey) {
                return response.data.vapidPublicKey
            }
        } catch (error) {
            console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å VAPID –∫–ª—é—á —Å —Å–µ—Ä–≤–µ—Ä–∞:', error)
        }

        // Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª—é—á –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        const envVapidKey = import.meta.env.VITE_VAPID_PUBLIC_KEY
        if (envVapidKey && envVapidKey !== 'YOUR_VAPID_PUBLIC_KEY_HERE') {
            return envVapidKey
        }

        // –í—Ä–µ–º–µ–Ω–Ω—ã–π –∫–ª—é—á –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (–ù–ï –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ –í –ü–†–û–î–ê–ö–®–ï–ù–ï!)
        console.warn('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤—Ä–µ–º–µ–Ω–Ω—ã–π VAPID –∫–ª—é—á –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏')
        return null // –í–æ–∑–≤—Ä–∞—â–∞–µ–º null –µ—Å–ª–∏ –Ω–µ—Ç –≤–∞–ª–∏–¥–Ω–æ–≥–æ –∫–ª—é—á–∞
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ VAPID –∫–ª—é—á–∞
    const isValidVapidKey = (key: string | null): boolean => {
        if (!key) return false
        if (key === 'YOUR_VAPID_PUBLIC_KEY_HERE') return false
        if (key.length < 80) return false // VAPID –∫–ª—é—á–∏ –æ–±—ã—á–Ω–æ –¥–ª–∏–Ω–Ω–µ–µ
        return true
    }

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    const getDeviceType = (): string => {
        const userAgent = navigator.userAgent.toLowerCase()
        if (/mobile|android|iphone|ipad|tablet/.test(userAgent)) {
            return 'mobile'
        }
        return 'desktop'
    }

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞ –∏ –≤–µ—Ä—Å–∏–∏
    const getBrowserInfo = (): { name: string; version: string } => {
        const userAgent = navigator.userAgent
        const userAgentLower = userAgent.toLowerCase()

        let browserName = 'Unknown'
        let browserVersion = 'Unknown'

        if (userAgentLower.includes('chrome') && !userAgentLower.includes('edg')) {
            browserName = 'Chrome'
            const match = userAgent.match(/Chrome\/(\d+\.\d+)/)
            browserVersion = match ? match[1] : 'Unknown'
        } else if (userAgentLower.includes('firefox')) {
            browserName = 'Firefox'
            const match = userAgent.match(/Firefox\/(\d+\.\d+)/)
            browserVersion = match ? match[1] : 'Unknown'
        } else if (userAgentLower.includes('safari') && !userAgentLower.includes('chrome')) {
            browserName = 'Safari'
            const match = userAgent.match(/Version\/(\d+\.\d+)/)
            browserVersion = match ? match[1] : 'Unknown'
        } else if (userAgentLower.includes('edg')) {
            browserName = 'Edge'
            const match = userAgent.match(/Edg\/(\d+\.\d+)/)
            browserVersion = match ? match[1] : 'Unknown'
        }

        return { name: browserName, version: browserVersion }
    }

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∏ –≤–µ—Ä—Å–∏–∏
    const getOSInfo = (): { name: string; version: string } => {
        const userAgent = navigator.userAgent

        let osName = 'Unknown'
        let osVersion = 'Unknown'

        if (userAgent.includes('Windows NT')) {
            osName = 'Windows'
            const match = userAgent.match(/Windows NT (\d+\.\d+)/)
            osVersion = match ? match[1] : 'Unknown'
        } else if (userAgent.includes('Mac OS X')) {
            osName = 'macOS'
            const match = userAgent.match(/Mac OS X (\d+[._]\d+[._]?\d*)/)
            osVersion = match ? match[1].replace(/_/g, '.') : 'Unknown'
        } else if (userAgent.includes('Linux')) {
            osName = 'Linux'
            osVersion = 'Unknown'
        } else if (userAgent.includes('Android')) {
            osName = 'Android'
            const match = userAgent.match(/Android (\d+\.\d+)/)
            osVersion = match ? match[1] : 'Unknown'
        } else if (userAgent.includes('iPhone') || userAgent.includes('iPad')) {
            osName = 'iOS'
            const match = userAgent.match(/OS (\d+[._]\d+[._]?\d*)/)
            osVersion = match ? match[1].replace(/_/g, '.') : 'Unknown'
        }

        return { name: osName, version: osVersion }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ IP –∞–¥—Ä–µ—Å–∞ (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ —á–µ—Ä–µ–∑ –≤–Ω–µ—à–Ω–∏–π —Å–µ—Ä–≤–∏—Å –∏–ª–∏ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ)
    const getClientIP = async (): Promise<string | null> => {
        try {
            // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ IP –±—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
            // –≠—Ç–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ - –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–Ω–µ—à–Ω–∏–π API
            return null // –°–µ—Ä–≤–µ—Ä —Å–∞–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç IP –∏–∑ request headers
        } catch (error) {
            console.warn('Could not determine client IP:', error)
            return null
        }
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    const sendSubscriptionToServer = async (subscription: PushSubscription): Promise<void> => {
        try {
            const browserInfo = getBrowserInfo()
            const osInfo = getOSInfo()
            const clientIP = await getClientIP()

            const subscriptionData = {
                endpoint: subscription.endpoint,
                p256dhKey: arrayBufferToBase64(subscription.getKey('p256dh')),
                authKey: arrayBufferToBase64(subscription.getKey('auth')),
                userAgent: navigator.userAgent,
                ipAddress: clientIP || undefined,
                deviceType: getDeviceType(),
                browserName: browserInfo.name,
                browserVersion: browserInfo.version,
                osName: osInfo.name,
                osVersion: osInfo.version,
                notificationTypes: ['new_message', 'mention', 'system'], // –¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,
            }

            const response = await pushSubscriptionApi.createSubscription(subscriptionData)

            if (response.error) {
                console.error('Failed to save subscription to server:', response.error)
                throw new Error(response.error.message)
            }

            if (response.data) {
                pushSubscriptionId.value = response.data.id
                console.log('Subscription saved to server successfully:', response.data)

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
                try {
                    await pushSubscriptionApi.sendSubscriptionNotification({
                        type: 'subscription_enabled',
                        message: '–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è push-–ø–æ–¥–ø–∏—Å–∫–∞',
                        subscriptionId: response.data.id,
                        metadata: {
                            endpoint: subscription.endpoint,
                            deviceType: getDeviceType(),
                            browserName: browserInfo.name,
                            browserVersion: browserInfo.version,
                            osName: osInfo.name,
                            osVersion: osInfo.version,
                            timestamp: new Date().toISOString(),
                        },
                    })
                } catch (notificationError) {
                    console.warn(
                        '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏:',
                        notificationError,
                    )
                }
            }
        } catch (error) {
            console.error('Error sending subscription to server:', error)
            throw error
        }
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞
    const removeSubscriptionFromServer = async (subscription: PushSubscription): Promise<void> => {
        try {
            if (pushSubscriptionId.value) {
                // –£–¥–∞–ª—è–µ–º –ø–æ ID –µ—Å–ª–∏ –µ—Å—Ç—å
                const currentSubscriptionId = pushSubscriptionId.value
                const response = await pushSubscriptionApi.deleteSubscription(currentSubscriptionId)

                if (response.error) {
                    console.error('Failed to remove subscription from server:', response.error)
                    throw new Error(response.error.message)
                }

                pushSubscriptionId.value = null
                console.log('Subscription removed from server successfully')

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
                try {
                    await pushSubscriptionApi.sendSubscriptionNotification({
                        type: 'subscription_disabled',
                        message: 'Push-–ø–æ–¥–ø–∏—Å–∫–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞',
                        subscriptionId: currentSubscriptionId,
                        metadata: {
                            reason: 'user_unsubscribed',
                            endpoint: subscription.endpoint,
                            timestamp: new Date().toISOString(),
                        },
                    })
                } catch (notificationError) {
                    console.warn(
                        '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏:',
                        notificationError,
                    )
                }
            } else {
                // –£–¥–∞–ª—è–µ–º –ø–æ endpoint –µ—Å–ª–∏ –Ω–µ—Ç ID
                const response = await pushSubscriptionApi.deleteSubscriptionByEndpoint(
                    subscription.endpoint,
                )

                if (response.error) {
                    console.error('Failed to remove subscription from server:', response.error)
                    throw new Error(response.error.message)
                }

                console.log('Subscription removed from server by endpoint successfully')

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ endpoint
                try {
                    await pushSubscriptionApi.sendSubscriptionNotification({
                        type: 'subscription_disabled',
                        message: 'Push-–ø–æ–¥–ø–∏—Å–∫–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –ø–æ endpoint',
                        metadata: {
                            reason: 'user_unsubscribed_by_endpoint',
                            endpoint: subscription.endpoint,
                            timestamp: new Date().toISOString(),
                        },
                    })
                } catch (notificationError) {
                    console.warn(
                        '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ endpoint:',
                        notificationError,
                    )
                }
            }
        } catch (error) {
            console.error('Error removing subscription from server:', error)
            throw error
        }
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const loadUserSubscriptions = async (): Promise<void> => {
        try {
            const response = await pushSubscriptionApi.getSubscriptions()

            if (response.error) {
                console.error('Failed to load user subscriptions:', response.error)
                return
            }

            if (response.data && response.data.length > 0) {
                // –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                const activeSubscription = response.data.find((sub) => sub.is_active)
                if (activeSubscription) {
                    pushSubscriptionId.value = activeSubscription.id
                    isSubscribedToPush.value = true

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ —Ç–µ–∫—É—â–µ–π
                    if ('serviceWorker' in navigator) {
                        const registration = await navigator.serviceWorker.ready
                        const currentSubscription = await registration.pushManager.getSubscription()

                        if (
                            currentSubscription &&
                            currentSubscription.endpoint === activeSubscription.endpoint
                        ) {
                            pushSubscription.value = currentSubscription
                        }
                    }
                }
            }
        } catch (error) {
            console.error('Error loading user subscriptions:', error)
        }
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ ArrayBuffer –≤ Base64
    const arrayBufferToBase64 = (buffer: ArrayBuffer | null): string => {
        if (!buffer) return ''
        const bytes = new Uint8Array(buffer)
        let binary = ''
        for (let i = 0; i < bytes.byteLength; i++) {
            binary += String.fromCharCode(bytes[i])
        }
        return window.btoa(binary)
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    initNotifications()

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    loadUserSubscriptions()

    // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã
    function applyTheme() {
        if (darkMode.value) {
            document.documentElement.classList.add('dark-theme')
            localStorage.setItem('theme', 'dark')
        } else {
            document.documentElement.classList.remove('dark-theme')
            localStorage.setItem('theme', 'light')
        }
    }

    // –í—ã–∑—ã–≤–∞–µ–º —Å—Ä–∞–∑—É –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ–º—ã
    applyTheme()

    function setDarkMode(value: boolean) {
        darkMode.value = value
        applyTheme()
    }

    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º—ã
    watch(darkMode, applyTheme)

    return {
        darkMode,
        setDarkMode,
        windowWidth,
        isPWAMode,
        checkPWAMode,
        // Push notifications
        notificationPermission,
        pushSubscription,
        isSubscribedToPush,
        pushSubscriptionId,
        requestNotificationPermission,
        ensureNotificationPermission,
        subscribeToPush,
        unsubscribeFromPush,
        loadUserSubscriptions,
    }
})
